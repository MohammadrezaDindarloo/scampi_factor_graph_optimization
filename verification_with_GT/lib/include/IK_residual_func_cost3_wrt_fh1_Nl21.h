// -----------------------------------------------------------------------------
// This file was autogenerated by symforce from template:
//     function/FUNCTION.h.jinja
// Do NOT modify by hand.
// -----------------------------------------------------------------------------

#pragma once

#include <Eigen/Dense>

namespace sym {

/**
 * This function was autogenerated from a symbolic function. Do not modify by hand.
 *
 * Symbolic function: IK_residual_func_cost3_wrt_fh1_Nl21
 *
 * Args:
 *     fh1: Scalar
 *     fv1: Scalar
 *     rx: Scalar
 *     ry: Scalar
 *     rz: Scalar
 *     p_init0: Scalar
 *     p_init1: Scalar
 *     p_init2: Scalar
 *     rot_init_x: Scalar
 *     rot_init_y: Scalar
 *     rot_init_z: Scalar
 *     rot_init_w: Scalar
 *     epsilon: Scalar
 *
 * Outputs:
 *     res: Matrix41
 */
template <typename Scalar>
Eigen::Matrix<Scalar, 4, 1> IkResidualFuncCost3WrtFh1Nl21(
    const Scalar fh1, const Scalar fv1, const Scalar rx, const Scalar ry, const Scalar rz,
    const Scalar p_init0, const Scalar p_init1, const Scalar p_init2, const Scalar rot_init_x,
    const Scalar rot_init_y, const Scalar rot_init_z, const Scalar rot_init_w,
    const Scalar epsilon) {
  // Total ops: 315

  // Unused inputs
  (void)p_init2;
  (void)epsilon;

  // Input arrays

  // Intermediate terms (116)
  const Scalar _tmp0 = std::sqrt(
      Scalar(std::pow(rx, Scalar(2)) + std::pow(ry, Scalar(2)) + std::pow(rz, Scalar(2))));
  const Scalar _tmp1 = (Scalar(1) / Scalar(2)) * _tmp0;
  const Scalar _tmp2 = std::cos(_tmp1);
  const Scalar _tmp3 = std::sin(_tmp1) / _tmp0;
  const Scalar _tmp4 = _tmp3 * ry;
  const Scalar _tmp5 = _tmp3 * rx;
  const Scalar _tmp6 = _tmp3 * rz;
  const Scalar _tmp7 =
      _tmp2 * rot_init_y + _tmp4 * rot_init_w + _tmp5 * rot_init_z - _tmp6 * rot_init_x;
  const Scalar _tmp8 = _tmp3 * rot_init_y;
  const Scalar _tmp9 = _tmp2 * rot_init_x - _tmp4 * rot_init_z + _tmp5 * rot_init_w + _tmp8 * rz;
  const Scalar _tmp10 = 2 * _tmp7 * _tmp9;
  const Scalar _tmp11 = _tmp2 * rot_init_z + _tmp4 * rot_init_x + _tmp6 * rot_init_w - _tmp8 * rx;
  const Scalar _tmp12 =
      2 * _tmp2 * rot_init_w - 2 * _tmp5 * rot_init_x - 2 * _tmp6 * rot_init_z - 2 * _tmp8 * ry;
  const Scalar _tmp13 = _tmp11 * _tmp12;
  const Scalar _tmp14 = Scalar(0.20999999999999999) * _tmp10 - Scalar(0.20999999999999999) * _tmp13;
  const Scalar _tmp15 = -2 * std::pow(_tmp7, Scalar(2));
  const Scalar _tmp16 = -2 * std::pow(_tmp11, Scalar(2));
  const Scalar _tmp17 = Scalar(0.20999999999999999) * _tmp15 +
                        Scalar(0.20999999999999999) * _tmp16 + Scalar(0.20999999999999999);
  const Scalar _tmp18 = 2 * _tmp11;
  const Scalar _tmp19 = _tmp18 * _tmp9;
  const Scalar _tmp20 = _tmp12 * _tmp7;
  const Scalar _tmp21 =
      -Scalar(0.010999999999999999) * _tmp19 - Scalar(0.010999999999999999) * _tmp20;
  const Scalar _tmp22 = -_tmp17 + _tmp21;
  const Scalar _tmp23 = _tmp14 + _tmp22;
  const Scalar _tmp24 = 1 - 2 * std::pow(_tmp9, Scalar(2));
  const Scalar _tmp25 = Scalar(0.20999999999999999) * _tmp16 + Scalar(0.20999999999999999) * _tmp24;
  const Scalar _tmp26 = _tmp18 * _tmp7;
  const Scalar _tmp27 = _tmp12 * _tmp9;
  const Scalar _tmp28 =
      -Scalar(0.010999999999999999) * _tmp26 + Scalar(0.010999999999999999) * _tmp27;
  const Scalar _tmp29 = Scalar(0.20999999999999999) * _tmp10 + Scalar(0.20999999999999999) * _tmp13;
  const Scalar _tmp30 = _tmp28 - _tmp29;
  const Scalar _tmp31 = _tmp25 + _tmp30;
  const Scalar _tmp32 = _tmp31 + p_init1 + Scalar(-4.8333311099999996);
  const Scalar _tmp33 = _tmp23 + p_init0 + Scalar(1.79662371);
  const Scalar _tmp34 = std::pow(Scalar(std::pow(_tmp32, Scalar(2)) + std::pow(_tmp33, Scalar(2))),
                                 Scalar(Scalar(-1) / Scalar(2)));
  const Scalar _tmp35 = _tmp32 * _tmp34;
  const Scalar _tmp36 = _tmp33 * _tmp34;
  const Scalar _tmp37 = _tmp23 * _tmp35 - _tmp31 * _tmp36;
  const Scalar _tmp38 = -_tmp25;
  const Scalar _tmp39 = _tmp30 + _tmp38;
  const Scalar _tmp40 = _tmp39 + p_init1 + Scalar(8.3196563700000006);
  const Scalar _tmp41 = -_tmp14;
  const Scalar _tmp42 = _tmp22 + _tmp41;
  const Scalar _tmp43 = _tmp42 + p_init0 + Scalar(1.9874742000000001);
  const Scalar _tmp44 = std::pow(Scalar(std::pow(_tmp40, Scalar(2)) + std::pow(_tmp43, Scalar(2))),
                                 Scalar(Scalar(-1) / Scalar(2)));
  const Scalar _tmp45 = _tmp43 * _tmp44;
  const Scalar _tmp46 = _tmp17 + _tmp21;
  const Scalar _tmp47 = _tmp41 + _tmp46;
  const Scalar _tmp48 = _tmp47 + p_init0 + Scalar(-2.5202214700000001);
  const Scalar _tmp49 = _tmp28 + _tmp29;
  const Scalar _tmp50 = _tmp38 + _tmp49;
  const Scalar _tmp51 = _tmp50 + p_init1 + Scalar(8.3888750099999996);
  const Scalar _tmp52 =
      std::sqrt(Scalar(std::pow(_tmp48, Scalar(2)) + std::pow(_tmp51, Scalar(2))));
  const Scalar _tmp53 = Scalar(1.0) / (_tmp52);
  const Scalar _tmp54 = Scalar(1.0) / (_tmp48);
  const Scalar _tmp55 = _tmp52 * _tmp54;
  const Scalar _tmp56 = _tmp55 * (_tmp47 * _tmp51 * _tmp53 - _tmp48 * _tmp50 * _tmp53);
  const Scalar _tmp57 = _tmp14 + _tmp46;
  const Scalar _tmp58 = _tmp25 + _tmp49;
  const Scalar _tmp59 = _tmp58 + p_init1 + Scalar(-4.7752063900000001);
  const Scalar _tmp60 = _tmp57 + p_init0 + Scalar(-2.71799795);
  const Scalar _tmp61 = std::pow(Scalar(std::pow(_tmp59, Scalar(2)) + std::pow(_tmp60, Scalar(2))),
                                 Scalar(Scalar(-1) / Scalar(2)));
  const Scalar _tmp62 = _tmp59 * _tmp61;
  const Scalar _tmp63 = _tmp60 * _tmp61;
  const Scalar _tmp64 = _tmp56 * _tmp63 - _tmp57 * _tmp62 + _tmp58 * _tmp63;
  const Scalar _tmp65 = _tmp51 * _tmp54;
  const Scalar _tmp66 = _tmp40 * _tmp44;
  const Scalar _tmp67 = _tmp45 * _tmp65 - _tmp66;
  const Scalar _tmp68 = Scalar(1.0) / (-_tmp62 + _tmp63 * _tmp65);
  const Scalar _tmp69 = _tmp67 * _tmp68;
  const Scalar _tmp70 = _tmp39 * _tmp45 - _tmp42 * _tmp66 + _tmp45 * _tmp56 - _tmp64 * _tmp69;
  const Scalar _tmp71 = Scalar(1.0) / (_tmp70);
  const Scalar _tmp72 = Scalar(1.0) * _tmp71;
  const Scalar _tmp73 = _tmp63 * _tmp69;
  const Scalar _tmp74 = _tmp37 * _tmp55 * (_tmp45 * _tmp72 - _tmp72 * _tmp73);
  const Scalar _tmp75 = Scalar(0.20999999999999999) * _tmp19 - Scalar(0.20999999999999999) * _tmp20;
  const Scalar _tmp76 =
      -Scalar(0.010999999999999999) * _tmp15 - Scalar(0.010999999999999999) * _tmp24;
  const Scalar _tmp77 = Scalar(0.20999999999999999) * _tmp26 + Scalar(0.20999999999999999) * _tmp27;
  const Scalar _tmp78 = _tmp76 - _tmp77;
  const Scalar _tmp79 = _tmp75 + _tmp78;
  const Scalar _tmp80 = _tmp63 * _tmp79;
  const Scalar _tmp81 = _tmp75 + _tmp76 + _tmp77;
  const Scalar _tmp82 = -_tmp63 * _tmp81 + _tmp80;
  const Scalar _tmp83 = -_tmp75 + _tmp78;
  const Scalar _tmp84 = _tmp45 * _tmp79;
  const Scalar _tmp85 = _tmp62 * _tmp81 - _tmp65 * _tmp80;
  const Scalar _tmp86 = Scalar(1.0) * _tmp47;
  const Scalar _tmp87 = Scalar(1.0) * _tmp50;
  const Scalar _tmp88 = (-_tmp57 + _tmp86) / (_tmp58 - _tmp87);
  const Scalar _tmp89 = -_tmp45 * _tmp83 - _tmp69 * _tmp82 + _tmp84 -
                        _tmp88 * (-_tmp65 * _tmp84 + _tmp66 * _tmp83 - _tmp69 * _tmp85);
  const Scalar _tmp90 = Scalar(1.0) / (_tmp89);
  const Scalar _tmp91 = _tmp65 * _tmp68;
  const Scalar _tmp92 = -_tmp79 + _tmp82 * _tmp91 - _tmp88 * (_tmp65 * _tmp79 + _tmp85 * _tmp91);
  const Scalar _tmp93 = _tmp70 * _tmp90;
  const Scalar _tmp94 = _tmp71 * _tmp89;
  const Scalar _tmp95 = _tmp92 + _tmp94 * (-_tmp56 + _tmp64 * _tmp91 - _tmp92 * _tmp93);
  const Scalar _tmp96 = _tmp90 * _tmp95;
  const Scalar _tmp97 = _tmp67 * _tmp90;
  const Scalar _tmp98 = _tmp68 * (-_tmp65 - _tmp95 * _tmp97);
  const Scalar _tmp99 = _tmp36 * _tmp55 * (_tmp45 * _tmp96 + _tmp63 * _tmp98 + Scalar(1.0));
  const Scalar _tmp100 = Scalar(43.164000000000001) - fv1;
  const Scalar _tmp101 = _tmp86 + _tmp87 * _tmp88;
  const Scalar _tmp102 = 0;
  const Scalar _tmp103 = Scalar(1.0) * _tmp68;
  const Scalar _tmp104 = -_tmp103 * _tmp82 + _tmp103 * _tmp85 * _tmp88;
  const Scalar _tmp105 = _tmp104 + _tmp94 * (-_tmp103 * _tmp64 - _tmp104 * _tmp93);
  const Scalar _tmp106 = _tmp68 * (-_tmp105 * _tmp97 + Scalar(1.0));
  const Scalar _tmp107 = _tmp105 * _tmp90;
  const Scalar _tmp108 = _tmp35 * _tmp55 * (_tmp106 * _tmp63 + _tmp107 * _tmp45);
  const Scalar _tmp109 = _tmp36 * _tmp98;
  const Scalar _tmp110 = _tmp100 * _tmp102;
  const Scalar _tmp111 = _tmp37 * _tmp72;
  const Scalar _tmp112 = _tmp111 * fh1;
  const Scalar _tmp113 = _tmp106 * _tmp35;
  const Scalar _tmp114 = _tmp36 * _tmp96;
  const Scalar _tmp115 = _tmp107 * _tmp35;

  // Output terms (1)
  Eigen::Matrix<Scalar, 4, 1> _res;

  _res(0, 0) = -std::exp(-fh1);
  _res(1, 0) = -(-_tmp108 - _tmp74 - _tmp99) *
               std::exp(_tmp100 * _tmp55 * (_tmp102 * _tmp45 - _tmp102 * _tmp73) + _tmp108 * fh1 +
                        _tmp74 * fh1 + _tmp99 * fh1);
  _res(2, 0) = -(_tmp109 - _tmp111 * _tmp69 + _tmp113) *
               std::exp(-_tmp109 * fh1 + _tmp110 * _tmp69 + _tmp112 * _tmp69 - _tmp113 * fh1);
  _res(3, 0) =
      -(_tmp111 + _tmp114 + _tmp115) * std::exp(-_tmp110 - _tmp112 - _tmp114 * fh1 - _tmp115 * fh1);

  return _res;
}  // NOLINT(readability/fn_size)

// NOLINTNEXTLINE(readability/fn_size)
}  // namespace sym

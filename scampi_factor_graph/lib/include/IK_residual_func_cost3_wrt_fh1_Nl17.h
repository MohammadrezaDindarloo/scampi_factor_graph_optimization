// -----------------------------------------------------------------------------
// This file was autogenerated by symforce from template:
//     function/FUNCTION.h.jinja
// Do NOT modify by hand.
// -----------------------------------------------------------------------------

#pragma once

#include <Eigen/Dense>

namespace sym {

/**
 * This function was autogenerated from a symbolic function. Do not modify by hand.
 *
 * Symbolic function: IK_residual_func_cost3_wrt_fh1_Nl17
 *
 * Args:
 *     fh1: Scalar
 *     fv1: Scalar
 *     rx: Scalar
 *     ry: Scalar
 *     rz: Scalar
 *     p_init0: Scalar
 *     p_init1: Scalar
 *     p_init2: Scalar
 *     rot_init_x: Scalar
 *     rot_init_y: Scalar
 *     rot_init_z: Scalar
 *     rot_init_w: Scalar
 *     epsilon: Scalar
 *
 * Outputs:
 *     res: Matrix41
 */
template <typename Scalar>
Eigen::Matrix<Scalar, 4, 1> IkResidualFuncCost3WrtFh1Nl17(
    const Scalar fh1, const Scalar fv1, const Scalar rx, const Scalar ry, const Scalar rz,
    const Scalar p_init0, const Scalar p_init1, const Scalar p_init2, const Scalar rot_init_x,
    const Scalar rot_init_y, const Scalar rot_init_z, const Scalar rot_init_w,
    const Scalar epsilon) {
  // Total ops: 318

  // Unused inputs
  (void)p_init2;
  (void)epsilon;

  // Input arrays

  // Intermediate terms (119)
  const Scalar _tmp0 = std::sqrt(
      Scalar(std::pow(rx, Scalar(2)) + std::pow(ry, Scalar(2)) + std::pow(rz, Scalar(2))));
  const Scalar _tmp1 = (Scalar(1) / Scalar(2)) * _tmp0;
  const Scalar _tmp2 = std::cos(_tmp1);
  const Scalar _tmp3 = std::sin(_tmp1) / _tmp0;
  const Scalar _tmp4 = _tmp3 * ry;
  const Scalar _tmp5 = _tmp3 * rx;
  const Scalar _tmp6 = _tmp3 * rz;
  const Scalar _tmp7 =
      _tmp2 * rot_init_x - _tmp4 * rot_init_z + _tmp5 * rot_init_w + _tmp6 * rot_init_y;
  const Scalar _tmp8 = _tmp3 * rot_init_w;
  const Scalar _tmp9 = _tmp2 * rot_init_y + _tmp5 * rot_init_z - _tmp6 * rot_init_x + _tmp8 * ry;
  const Scalar _tmp10 = 2 * _tmp9;
  const Scalar _tmp11 = _tmp10 * _tmp7;
  const Scalar _tmp12 =
      _tmp2 * rot_init_w - _tmp4 * rot_init_y - _tmp5 * rot_init_x - _tmp6 * rot_init_z;
  const Scalar _tmp13 = _tmp2 * rot_init_z + _tmp4 * rot_init_x - _tmp5 * rot_init_y + _tmp8 * rz;
  const Scalar _tmp14 = 2 * _tmp13;
  const Scalar _tmp15 = _tmp12 * _tmp14;
  const Scalar _tmp16 = Scalar(0.20999999999999999) * _tmp11 - Scalar(0.20999999999999999) * _tmp15;
  const Scalar _tmp17 = _tmp14 * _tmp7;
  const Scalar _tmp18 = _tmp10 * _tmp12;
  const Scalar _tmp19 =
      -Scalar(0.010999999999999999) * _tmp17 - Scalar(0.010999999999999999) * _tmp18;
  const Scalar _tmp20 = -2 * std::pow(_tmp9, Scalar(2));
  const Scalar _tmp21 = 1 - 2 * std::pow(_tmp13, Scalar(2));
  const Scalar _tmp22 = Scalar(0.20999999999999999) * _tmp20 + Scalar(0.20999999999999999) * _tmp21;
  const Scalar _tmp23 = _tmp19 + _tmp22;
  const Scalar _tmp24 = _tmp16 + _tmp23;
  const Scalar _tmp25 = -2 * std::pow(_tmp7, Scalar(2));
  const Scalar _tmp26 = Scalar(0.20999999999999999) * _tmp21 + Scalar(0.20999999999999999) * _tmp25;
  const Scalar _tmp27 = _tmp10 * _tmp13;
  const Scalar _tmp28 = 2 * _tmp12 * _tmp7;
  const Scalar _tmp29 =
      -Scalar(0.010999999999999999) * _tmp27 + Scalar(0.010999999999999999) * _tmp28;
  const Scalar _tmp30 = Scalar(0.20999999999999999) * _tmp11 + Scalar(0.20999999999999999) * _tmp15;
  const Scalar _tmp31 = _tmp29 + _tmp30;
  const Scalar _tmp32 = _tmp26 + _tmp31;
  const Scalar _tmp33 = _tmp32 + p_init1 + Scalar(-4.7752063900000001);
  const Scalar _tmp34 = _tmp24 + p_init0 + Scalar(-2.71799795);
  const Scalar _tmp35 = std::pow(Scalar(std::pow(_tmp33, Scalar(2)) + std::pow(_tmp34, Scalar(2))),
                                 Scalar(Scalar(-1) / Scalar(2)));
  const Scalar _tmp36 = _tmp33 * _tmp35;
  const Scalar _tmp37 = _tmp34 * _tmp35;
  const Scalar _tmp38 = _tmp24 * _tmp36 - _tmp32 * _tmp37;
  const Scalar _tmp39 = -_tmp16;
  const Scalar _tmp40 = _tmp23 + _tmp39;
  const Scalar _tmp41 = _tmp40 + p_init0 + Scalar(-2.5202214700000001);
  const Scalar _tmp42 = -_tmp26;
  const Scalar _tmp43 = _tmp31 + _tmp42;
  const Scalar _tmp44 = _tmp43 + p_init1 + Scalar(8.3888750099999996);
  const Scalar _tmp45 = std::pow(Scalar(std::pow(_tmp41, Scalar(2)) + std::pow(_tmp44, Scalar(2))),
                                 Scalar(Scalar(-1) / Scalar(2)));
  const Scalar _tmp46 = _tmp41 * _tmp45;
  const Scalar _tmp47 = _tmp29 - _tmp30;
  const Scalar _tmp48 = _tmp26 + _tmp47;
  const Scalar _tmp49 = _tmp48 + p_init1 + Scalar(-4.8333311099999996);
  const Scalar _tmp50 = _tmp19 - _tmp22;
  const Scalar _tmp51 = _tmp16 + _tmp50;
  const Scalar _tmp52 = _tmp51 + p_init0 + Scalar(1.79662371);
  const Scalar _tmp53 = Scalar(1.0) / (_tmp52);
  const Scalar _tmp54 = _tmp49 * _tmp53;
  const Scalar _tmp55 = _tmp42 + _tmp47;
  const Scalar _tmp56 = _tmp55 + p_init1 + Scalar(8.3196563700000006);
  const Scalar _tmp57 = _tmp39 + _tmp50;
  const Scalar _tmp58 = _tmp57 + p_init0 + Scalar(1.9874742000000001);
  const Scalar _tmp59 = std::pow(Scalar(std::pow(_tmp56, Scalar(2)) + std::pow(_tmp58, Scalar(2))),
                                 Scalar(Scalar(-1) / Scalar(2)));
  const Scalar _tmp60 = _tmp58 * _tmp59;
  const Scalar _tmp61 = _tmp56 * _tmp59;
  const Scalar _tmp62 = _tmp54 * _tmp60 - _tmp61;
  const Scalar _tmp63 =
      std::sqrt(Scalar(std::pow(_tmp49, Scalar(2)) + std::pow(_tmp52, Scalar(2))));
  const Scalar _tmp64 = Scalar(1.0) / (_tmp63);
  const Scalar _tmp65 = _tmp53 * _tmp63;
  const Scalar _tmp66 = _tmp65 * (-_tmp48 * _tmp52 * _tmp64 + _tmp49 * _tmp51 * _tmp64);
  const Scalar _tmp67 = _tmp44 * _tmp45;
  const Scalar _tmp68 = -_tmp40 * _tmp67 + _tmp43 * _tmp46 + _tmp46 * _tmp66;
  const Scalar _tmp69 = Scalar(1.0) / (_tmp46 * _tmp54 - _tmp67);
  const Scalar _tmp70 = _tmp62 * _tmp69;
  const Scalar _tmp71 = _tmp55 * _tmp60 - _tmp57 * _tmp61 + _tmp60 * _tmp66 - _tmp68 * _tmp70;
  const Scalar _tmp72 = Scalar(1.0) / (_tmp71);
  const Scalar _tmp73 = Scalar(1.0) * _tmp69;
  const Scalar _tmp74 = _tmp62 * _tmp72 * _tmp73;
  const Scalar _tmp75 = Scalar(1.0) * _tmp72;
  const Scalar _tmp76 = _tmp38 * _tmp65 * (-_tmp46 * _tmp74 + _tmp60 * _tmp75);
  const Scalar _tmp77 = Scalar(0.20999999999999999) * _tmp17 - Scalar(0.20999999999999999) * _tmp18;
  const Scalar _tmp78 = -Scalar(0.010999999999999999) * _tmp20 -
                        Scalar(0.010999999999999999) * _tmp25 + Scalar(-0.010999999999999999);
  const Scalar _tmp79 = Scalar(0.20999999999999999) * _tmp27 + Scalar(0.20999999999999999) * _tmp28;
  const Scalar _tmp80 = _tmp78 - _tmp79;
  const Scalar _tmp81 = _tmp77 + _tmp80;
  const Scalar _tmp82 = -_tmp77;
  const Scalar _tmp83 = _tmp78 + _tmp79 + _tmp82;
  const Scalar _tmp84 = -_tmp46 * _tmp81 + _tmp46 * _tmp83;
  const Scalar _tmp85 = _tmp54 * _tmp83;
  const Scalar _tmp86 = -_tmp46 * _tmp85 + _tmp67 * _tmp81;
  const Scalar _tmp87 = Scalar(1.0) * _tmp48;
  const Scalar _tmp88 = Scalar(1.0) * _tmp51;
  const Scalar _tmp89 = (-_tmp40 + _tmp88) / (_tmp43 - _tmp87);
  const Scalar _tmp90 = -_tmp73 * _tmp84 + _tmp73 * _tmp86 * _tmp89;
  const Scalar _tmp91 = _tmp80 + _tmp82;
  const Scalar _tmp92 = _tmp60 * _tmp83 - _tmp60 * _tmp91 - _tmp70 * _tmp84 -
                        _tmp89 * (-_tmp60 * _tmp85 + _tmp61 * _tmp91 - _tmp70 * _tmp86);
  const Scalar _tmp93 = Scalar(1.0) / (_tmp92);
  const Scalar _tmp94 = _tmp71 * _tmp93;
  const Scalar _tmp95 = _tmp72 * _tmp92;
  const Scalar _tmp96 = _tmp90 + _tmp95 * (-_tmp68 * _tmp73 - _tmp90 * _tmp94);
  const Scalar _tmp97 = _tmp93 * _tmp96;
  const Scalar _tmp98 = _tmp62 * _tmp93;
  const Scalar _tmp99 = -_tmp96 * _tmp98 + Scalar(1.0);
  const Scalar _tmp100 = _tmp46 * _tmp69;
  const Scalar _tmp101 = _tmp36 * _tmp65 * (_tmp100 * _tmp99 + _tmp60 * _tmp97);
  const Scalar _tmp102 = Scalar(43.164000000000001) - fv1;
  const Scalar _tmp103 = _tmp87 * _tmp89 + _tmp88;
  const Scalar _tmp104 = 0;
  const Scalar _tmp105 = _tmp104 * _tmp98;
  const Scalar _tmp106 = _tmp104 * _tmp93;
  const Scalar _tmp107 = _tmp54 * _tmp69;
  const Scalar _tmp108 = _tmp107 * _tmp84 - _tmp83 - _tmp89 * (_tmp107 * _tmp86 + _tmp85);
  const Scalar _tmp109 = _tmp108 + _tmp95 * (_tmp107 * _tmp68 - _tmp108 * _tmp94 - _tmp66);
  const Scalar _tmp110 = _tmp109 * _tmp93;
  const Scalar _tmp111 = -_tmp109 * _tmp98 - _tmp54;
  const Scalar _tmp112 = _tmp37 * _tmp65 * (_tmp100 * _tmp111 + _tmp110 * _tmp60 + Scalar(1.0));
  const Scalar _tmp113 = _tmp38 * _tmp74;
  const Scalar _tmp114 = _tmp111 * _tmp37 * _tmp69;
  const Scalar _tmp115 = _tmp36 * _tmp69 * _tmp99;
  const Scalar _tmp116 = _tmp110 * _tmp37;
  const Scalar _tmp117 = _tmp36 * _tmp97;
  const Scalar _tmp118 = _tmp38 * _tmp75;

  // Output terms (1)
  Eigen::Matrix<Scalar, 4, 1> _res;

  _res(0, 0) = -std::exp(-fh1);
  _res(1, 0) = -(-_tmp101 - _tmp112 - _tmp76) *
               std::exp(_tmp101 * fh1 + _tmp102 * _tmp65 * (-_tmp100 * _tmp105 + _tmp106 * _tmp60) +
                        _tmp112 * fh1 + _tmp76 * fh1);
  _res(2, 0) = -(-_tmp113 + _tmp114 + _tmp115) *
               std::exp(_tmp102 * _tmp105 * _tmp69 + _tmp113 * fh1 - _tmp114 * fh1 - _tmp115 * fh1);
  _res(3, 0) = -(_tmp116 + _tmp117 + _tmp118) *
               std::exp(-_tmp102 * _tmp106 - _tmp116 * fh1 - _tmp117 * fh1 - _tmp118 * fh1);

  return _res;
}  // NOLINT(readability/fn_size)

// NOLINTNEXTLINE(readability/fn_size)
}  // namespace sym
